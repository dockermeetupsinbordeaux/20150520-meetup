logs:
  image: cogniteev/echo
  volumes:
    - /var/log/containers
data:
  image: cogniteev/echo
  volumes:
    - /data
redisnode1:
  build: redis
  command: >
    redis-server --logfile /var/log/containers/redisnode1.log
                 --dbfilename redisnode1.rdb
                 --save 30 1
  volumes_from:
    - data
    - logs

redisnode2:
  build: redis
  command: >
    redis-server --slaveof master 6379
                 --logfile /var/log/containers/redisnode2.log
                 --dbfilename redisnode2.rdb
                 --save 30 1
  links:
    - redisnode1:master
  volumes_from:
    - data
    - logs

redisnode3:
  build: redis
  command: >
    redis-server --slaveof master 6379
                 --logfile /var/log/containers/redisnode3.log
                 --dbfilename redisnode3.rdb
                 --save 30 1
  links:
    - redisnode1:master
  volumes_from:
    - data
    - logs

redissentinel1:
  build: sentinel
  volumes_from:
    - data
    - logs
  links:
    - redisnode1:master
    - redisnode2
    - redisnode3
  environment:
    SENTINEL_NAME: redissentinel1

redissentinel2:
  build: sentinel
  volumes_from:
    - data
    - logs
  links:
    - redisnode1:master
    - redisnode2
    - redisnode3
  environment:
    SENTINEL_NAME: redissentinel2

redissentinel3:
  build: sentinel
  volumes_from:
    - data
    - logs
  links:
    - redisnode1:master
    - redisnode2
    - redisnode3
  environment:
    SENTINEL_NAME: redissentinel3

web1:
  build: ./web
  command: >
    uwsgi --socket 0.0.0.0:5000 -w app:app
          --logto /var/log/containers/web1.log
  links:
    - redisnode1
    - redisnode2
    - redisnode3
    - redissentinel1
    - redissentinel2
    - redissentinel3
  volumes_from:
    - logs

web2:
  build: ./web
  command: >
    uwsgi --socket 0.0.0.0:5000 -w app:app
          --logto /var/log/containers/web2.log
  links:
    - redisnode1
    - redisnode2
    - redisnode3
    - redissentinel1
    - redissentinel2
    - redissentinel3
  volumes_from:
    - logs

webproxy:
  build: ./webproxy
  ports:
    - "80:80"
  links:
    - web1:upstream1
    - web2:upstream2
  volumes_from:
    - logs

elasticsearch:
  image: elasticsearch

logstash:
  build: logstash
  links:
    - elasticsearch
    - riemann
  volumes_from:
    - logs

rsyslog:
  image: cogniteev/rsyslogstash
  volumes_from:
    - logs
  links:
    - logstash:logstash

kibana:
  image: marcbachmann/kibana4
  links:
    - elasticsearch:elasticsearch
  ports:
    - "5601:5601"

graphite:
  image: cogniteev/graphite
  ports:
    - "8080:80"

riemann:
  build: riemann
  links:
    - graphite

zbxdata:
  image: cogniteev/echo
  volumes:
    - /var/lib/mysql

zbxmysql:
  build: zabbix-mysql
  volumes_from:
    - zbxdata

zbxserver:
  build: zabbix-server
  links:
    - zbxmysql:zabbix-db

zbxweb:
  build: zabbix-web
  ports:
    - "8081:80"
  links:
    - zbxmysql:zabbix-db

zbxsender:
  image: dockermeetupsinbordeaux/docker-zabbix-sender
  command: --tlsverify=false -r
  environment:
    ZABBIX_HOST: standalone.docker.meetup
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: /certs
    DOCKER_HOST: tcp://192.168.99.100:2376
  links:
    - zbxserver:zabbix-server
  volumes:
#    - "/var/run/docker.sock:/var/run/docker.sock"
    - "/Users/tristan/.docker/machine/machines/dev:/certs"
